diff --git a/src/components/Checkbox/CheckboxAndroid.tsx b/src/components/Checkbox/CheckboxAndroid.tsx
index 642602b0fa0e47f984d5b2d10da770b0dfb28018..a4190aced0c430e3463bae5fdc48f0e1da3004a5 100644
--- a/src/components/Checkbox/CheckboxAndroid.tsx
+++ b/src/components/Checkbox/CheckboxAndroid.tsx
@@ -162,7 +162,7 @@ const styles = StyleSheet.create({
     borderRadius: 18,
     width: 36,
     height: 36,
-    padding: 6,
+    padding: 0,
   },
   fillContainer: {
     alignItems: 'center',
diff --git a/src/components/Checkbox/CheckboxIOS.tsx b/src/components/Checkbox/CheckboxIOS.tsx
index e5f2c1a021b8d64966c7f62f838baf8ec5864274..060460c9fc47cf1d54822095b3edb36e09e8abc9 100644
--- a/src/components/Checkbox/CheckboxIOS.tsx
+++ b/src/components/Checkbox/CheckboxIOS.tsx
@@ -94,7 +94,7 @@ CheckboxIOS.displayName = 'Checkbox.IOS';
 const styles = StyleSheet.create({
   container: {
     borderRadius: 18,
-    padding: 6,
+    padding: 0,
   },
 });
 
diff --git a/src/components/List/ListAccordion.tsx b/src/components/List/ListAccordion.tsx
index 7c850988984b2d0dabbd5727c1ec5466d8f676cc..ef4d2c572a7898bac91be4d70dc5e41d4a3341c9 100644
--- a/src/components/List/ListAccordion.tsx
+++ b/src/components/List/ListAccordion.tsx
@@ -22,6 +22,7 @@ import type { ThemeProp } from '../../types';
 import MaterialCommunityIcon from '../MaterialCommunityIcon';
 import TouchableRipple from '../TouchableRipple/TouchableRipple';
 import Text from '../Typography/Text';
+import ContextMenu, { ContextMenuAction, ContextMenuOnPressNativeEvent } from 'react-native-context-menu-view';
 
 export type Props = {
   /**
@@ -121,6 +122,14 @@ export type Props = {
    * `pointerEvents` passed to the `View` container
    */
   pointerEvents?: ViewProps['pointerEvents'];
+  /**
+   * Sets actions for context menu
+   */
+  contextMenuActions: Array<ContextMenuAction>;
+  /**
+   * Sets handler for pressing on context menu item
+   */
+  onContextMenuActionPress: (e: NativeSyntheticEvent<ContextMenuOnPressNativeEvent>) => void;
 };
 
 /**
@@ -184,6 +193,8 @@ const ListAccordion = ({
   pointerEvents = 'none',
   titleMaxFontSizeMultiplier,
   descriptionMaxFontSizeMultiplier,
+  contextMenuActions,
+  onContextMenuActionPress
 }: Props) => {
   const theme = useInternalTheme(themeOverrides);
   const [expanded, setExpanded] = React.useState<boolean>(
@@ -236,85 +247,87 @@ const ListAccordion = ({
       : handlePressAction;
   return (
     <View>
-      <View style={{ backgroundColor: theme?.colors?.background }}>
-        <TouchableRipple
-          style={[theme.isV3 ? styles.containerV3 : styles.container, style]}
-          onPress={handlePress}
-          onLongPress={onLongPress}
-          delayLongPress={delayLongPress}
-          rippleColor={rippleColor}
-          accessibilityRole="button"
-          accessibilityState={{ expanded: isExpanded }}
-          accessibilityLabel={accessibilityLabel}
-          testID={testID}
-          theme={theme}
-          background={background}
-          borderless
-        >
-          <View
-            style={theme.isV3 ? styles.rowV3 : styles.row}
-            pointerEvents={pointerEvents}
+      <ContextMenu actions={contextMenuActions} onPress={onContextMenuActionPress}>
+        <View style={{ backgroundColor: theme?.colors?.background }}>
+          <TouchableRipple
+            style={[theme.isV3 ? styles.containerV3 : styles.container, style]}
+            onPress={handlePress}
+            onLongPress={onLongPress}
+            delayLongPress={delayLongPress}
+            rippleColor={rippleColor}
+            accessibilityRole="button"
+            accessibilityState={{ expanded: isExpanded }}
+            accessibilityLabel={accessibilityLabel}
+            testID={testID}
+            theme={theme}
+            background={background}
+            borderless
           >
-            {left
-              ? left({
-                  color: isExpanded ? theme.colors?.primary : descriptionColor,
-                  style: getLeftStyles(alignToTop, description, theme.isV3),
-                })
-              : null}
             <View
-              style={[theme.isV3 ? styles.itemV3 : styles.item, styles.content]}
+              style={theme.isV3 ? styles.rowV3 : styles.row}
+              pointerEvents={pointerEvents}
             >
-              <Text
-                selectable={false}
-                numberOfLines={titleNumberOfLines}
-                style={[
-                  styles.title,
-                  {
-                    color: titleTextColor,
-                  },
-                  titleStyle,
-                ]}
-                maxFontSizeMultiplier={titleMaxFontSizeMultiplier}
+              {left
+                ? left({
+                    color: isExpanded ? theme.colors?.primary : descriptionColor,
+                    style: getLeftStyles(alignToTop, description, theme.isV3),
+                  })
+                : null}
+              <View
+                style={[theme.isV3 ? styles.itemV3 : styles.item, styles.content]}
               >
-                {title}
-              </Text>
-              {description ? (
                 <Text
                   selectable={false}
-                  numberOfLines={descriptionNumberOfLines}
+                  numberOfLines={titleNumberOfLines}
                   style={[
-                    styles.description,
+                    styles.title,
                     {
-                      color: descriptionColor,
+                      color: titleTextColor,
                     },
-                    descriptionStyle,
+                    titleStyle,
                   ]}
-                  onTextLayout={onDescriptionTextLayout}
-                  maxFontSizeMultiplier={descriptionMaxFontSizeMultiplier}
+                  maxFontSizeMultiplier={titleMaxFontSizeMultiplier}
                 >
-                  {description}
+                  {title}
                 </Text>
-              ) : null}
-            </View>
-            <View
-              style={[styles.item, description ? styles.multiline : undefined]}
-            >
-              {right ? (
-                right({
-                  isExpanded: isExpanded,
-                })
-              ) : (
-                <MaterialCommunityIcon
-                  name={isExpanded ? 'chevron-up' : 'chevron-down'}
-                  color={theme.isV3 ? descriptionColor : titleColor}
-                  size={24}
-                  direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}
-                />
-              )}
+                {description ? (
+                  <Text
+                    selectable={false}
+                    numberOfLines={descriptionNumberOfLines}
+                    style={[
+                      styles.description,
+                      {
+                        color: descriptionColor,
+                      },
+                      descriptionStyle,
+                    ]}
+                    onTextLayout={onDescriptionTextLayout}
+                    maxFontSizeMultiplier={descriptionMaxFontSizeMultiplier}
+                  >
+                    {description}
+                  </Text>
+                ) : null}
+              </View>
+              <View
+                style={[styles.item, description ? styles.multiline : undefined]}
+              >
+                {right ? (
+                  right({
+                    isExpanded: isExpanded,
+                  })
+                ) : (
+                  <MaterialCommunityIcon
+                    name={isExpanded ? 'chevron-up' : 'chevron-down'}
+                    color={theme.isV3 ? descriptionColor : titleColor}
+                    size={24}
+                    direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}
+                  />
+                )}
+              </View>
             </View>
-          </View>
-        </TouchableRipple>
-      </View>
+         </TouchableRipple>
+        </View>
+      </ContextMenu>
 
       {isExpanded
         ? React.Children.map(children, (child) => {
